openapi: 3.0.3
info:
  title: Brokerage API
  version: 1.0.0
  description: Django REST API backend for the brokerage application with JWT authentication.
paths:
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: Authenticate user and return JWT tokens
      summary: User login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
              - email
              - password
            examples:
              LoginExample:
                value:
                  email: user@example.com
                  password: SecurePass123
                summary: Login Example
      security:
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                application/json:
                  type: object
                  properties:
                    access_token:
                      type: string
                    refresh_token:
                      type: string
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: Logout user by revoking refresh token
      summary: User logout
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required:
              - refresh_token
      security:
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                application/json:
                  type: object
                  properties:
                    message:
                      type: string
          description: ''
  /api/auth/protected/:
    get:
      operationId: auth_protected_retrieve
      description: Example protected endpoint requiring JWT authentication
      summary: Protected endpoint
      tags:
      - auth
      security:
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                application/json:
                  type: object
                  properties:
                    message:
                      type: string
                    user_id:
                      type: integer
                    username:
                      type: string
          description: ''
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: Refresh JWT tokens using refresh token
      summary: Refresh tokens
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required:
              - refresh_token
      security:
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                application/json:
                  type: object
                  properties:
                    access_token:
                      type: string
                    refresh_token:
                      type: string
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      description: Register a new user account and return JWT tokens
      summary: Register new user
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
              required:
              - email
              - password
              - firstName
              - lastName
            examples:
              RegistrationExample:
                value:
                  email: user@example.com
                  password: SecurePass123
                  firstName: John
                  lastName: Doe
                summary: Registration Example
      security:
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                application/json:
                  type: object
                  properties:
                    access_token:
                      type: string
                    refresh_token:
                      type: string
          description: ''
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
