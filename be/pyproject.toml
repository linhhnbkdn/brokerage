[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "brokerage-be"
version = "0.1.0"
description = "Django REST API backend for brokerage application"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
dependencies = [
    "django>=4.2,<5.0",
    "djangorestframework>=3.14.0",
    "django-cors-headers>=4.0.0",
    "python-dotenv>=1.0.0",
    "psycopg2-binary>=2.9.0",
    "celery>=5.3.0",
    "redis>=4.5.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-django>=4.5.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "django-stubs[compatible-mypy]>=4.2.0",
    "djangorestframework-stubs[compatible-mypy]>=3.14.0",
    "pre-commit>=3.4.0",
]

[tool.uv]
dev-dependencies = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-django>=4.5.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "django-stubs[compatible-mypy]>=4.2.0",
    "djangorestframework-stubs[compatible-mypy]>=3.14.0",
    "pre-commit>=3.4.0",
]

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py311"
line-length = 80
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "NPY",    # numpy
    "RUF",    # ruff-specific rules
]

ignore = [
    "S101",   # Use of assert detected
    "S104",   # Possible binding to all interfaces
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "DJ001",  # Avoid using null=True on string-based fields
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals on one line (conflicts with formatter)
]

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "static",
    "media",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-django = ["django"]
known-first-party = ["be"]
section-order = [
    "future",
    "standard-library", 
    "django",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = [
    "S101",   # Use of assert detected
    "ARG",    # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",    # Don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison, ...
    "S106",   # Possible hardcoded password
]
"**/migrations/**/*.py" = [
    "E501",   # Line too long
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
"manage.py" = ["T201"]  # Allow print statements in management commands
"**/settings/**/*.py" = [
    "F405",   # `from .base import *` may be undefined, or defined from star imports
    "F403",   # `from .base import *` used; unable to detect undefined names
]

# Pytest configuration
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "be.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
addopts = [
    "--reuse-db",
    "--nomigrations",
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-v",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[tool.django-stubs]
django_settings_module = "be.settings"

# Coverage configuration
[tool.coverage.run]
source = "."
branch = true
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "*/settings/*",
    "*/__pycache__/*",
    "*/static/*",
    "*/media/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]