# Generated by Django 5.2.5 on 2025-08-28 02:37

import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MarketDataSnapshot",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        help_text="Trading symbol (e.g., AAPL, BTC-USD)", max_length=10
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=6, help_text="Current price", max_digits=15
                    ),
                ),
                (
                    "change",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Price change from previous close",
                        max_digits=15,
                    ),
                ),
                (
                    "change_percent",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Percentage change from previous close",
                        max_digits=8,
                    ),
                ),
                ("volume", models.BigIntegerField(help_text="Trading volume")),
                (
                    "bid",
                    models.DecimalField(
                        decimal_places=6, help_text="Best bid price", max_digits=15
                    ),
                ),
                (
                    "ask",
                    models.DecimalField(
                        decimal_places=6, help_text="Best ask price", max_digits=15
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Market data timestamp",
                    ),
                ),
                (
                    "exchange",
                    models.CharField(
                        default="SIMULATOR", help_text="Exchange name", max_length=20
                    ),
                ),
            ],
            options={
                "db_table": "exchange_market_data",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["symbol", "-timestamp"],
                        name="exchange_ma_symbol_dbdf7e_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="exchange_ma_timesta_9ab40d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MarketEvent",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "symbol",
                    models.CharField(help_text="Affected symbol", max_length=10),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("earnings_beat", "Earnings Beat"),
                            ("earnings_miss", "Earnings Miss"),
                            ("dividend_announcement", "Dividend Announcement"),
                            ("stock_split", "Stock Split"),
                            ("merger_acquisition", "Merger/Acquisition"),
                            ("regulatory_news", "Regulatory News"),
                            ("market_news", "Market News"),
                            ("technical_alert", "Technical Alert"),
                        ],
                        help_text="Type of market event",
                        max_length=30,
                    ),
                ),
                (
                    "impact",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Expected market impact",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(help_text="Event title", max_length=200)),
                ("description", models.TextField(help_text="Event description")),
                (
                    "event_timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the event occurred",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether event is still relevant"
                    ),
                ),
            ],
            options={
                "db_table": "exchange_market_events",
                "ordering": ["-event_timestamp"],
                "indexes": [
                    models.Index(
                        fields=["symbol", "-event_timestamp"],
                        name="exchange_ma_symbol_86a0ed_idx",
                    ),
                    models.Index(
                        fields=["event_type", "-event_timestamp"],
                        name="exchange_ma_event_t_15c25f_idx",
                    ),
                    models.Index(
                        fields=["impact", "-event_timestamp"],
                        name="exchange_ma_impact_9259dc_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "order_id",
                    models.CharField(
                        help_text="External order ID", max_length=50, unique=True
                    ),
                ),
                ("symbol", models.CharField(help_text="Trading symbol", max_length=10)),
                (
                    "side",
                    models.CharField(
                        choices=[("buy", "Buy"), ("sell", "Sell")],
                        help_text="Buy or sell",
                        max_length=4,
                    ),
                ),
                (
                    "order_type",
                    models.CharField(
                        choices=[
                            ("market", "Market Order"),
                            ("limit", "Limit Order"),
                            ("stop", "Stop Order"),
                            ("stop_limit", "Stop Limit Order"),
                        ],
                        help_text="Order type",
                        max_length=10,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=6, help_text="Order quantity", max_digits=15
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Order price (for limit/stop orders)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "stop_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Stop price (for stop orders)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "filled_quantity",
                    models.DecimalField(
                        decimal_places=6,
                        default=Decimal("0.00"),
                        help_text="Quantity filled",
                        max_digits=15,
                    ),
                ),
                (
                    "average_fill_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Average price of fills",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("submitted", "Submitted"),
                            ("partial", "Partially Filled"),
                            ("filled", "Filled"),
                            ("cancelled", "Cancelled"),
                            ("rejected", "Rejected"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        help_text="Order status",
                        max_length=10,
                    ),
                ),
                (
                    "time_in_force",
                    models.CharField(
                        choices=[
                            ("day", "Day Order"),
                            ("gtc", "Good Till Cancelled"),
                            ("ioc", "Immediate or Cancel"),
                            ("fok", "Fill or Kill"),
                        ],
                        default="day",
                        help_text="Time in force",
                        max_length=3,
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When order was submitted to exchange",
                        null=True,
                    ),
                ),
                (
                    "filled_at",
                    models.DateTimeField(
                        blank=True, help_text="When order was fully filled", null=True
                    ),
                ),
                (
                    "cancelled_at",
                    models.DateTimeField(
                        blank=True, help_text="When order was cancelled", null=True
                    ),
                ),
                (
                    "exchange",
                    models.CharField(
                        default="SIMULATOR", help_text="Exchange name", max_length=20
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exchange_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "exchange_orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderExecution",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "execution_id",
                    models.CharField(
                        help_text="Execution ID from exchange",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=6, help_text="Executed quantity", max_digits=15
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=6, help_text="Execution price", max_digits=15
                    ),
                ),
                (
                    "executed_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Execution timestamp",
                    ),
                ),
                (
                    "commission",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Commission charged",
                        max_digits=10,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="exchange.order",
                    ),
                ),
            ],
            options={
                "db_table": "exchange_order_executions",
                "ordering": ["-executed_at"],
            },
        ),
        migrations.CreateModel(
            name="SymbolSubscription",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("symbol", models.CharField(help_text="Trading symbol", max_length=10)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether subscription is active"
                    ),
                ),
                (
                    "subscribed_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When user subscribed",
                    ),
                ),
                (
                    "last_price_update",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time price update was sent to user",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="symbol_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "exchange_symbol_subscriptions",
            },
        ),
        migrations.CreateModel(
            name="WebSocketConnection",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "channel_name",
                    models.CharField(
                        help_text="Channels channel name", max_length=100, unique=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("connecting", "Connecting"),
                            ("connected", "Connected"),
                            ("authenticated", "Authenticated"),
                            ("disconnected", "Disconnected"),
                            ("error", "Error"),
                        ],
                        default="connecting",
                        help_text="Connection status",
                        max_length=15,
                    ),
                ),
                (
                    "connected_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When connection was established",
                    ),
                ),
                (
                    "authenticated_at",
                    models.DateTimeField(
                        blank=True, help_text="When user was authenticated", null=True
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Last activity timestamp",
                    ),
                ),
                (
                    "disconnected_at",
                    models.DateTimeField(
                        blank=True, help_text="When connection was closed", null=True
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="Client IP address", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="Client user agent", null=True
                    ),
                ),
                (
                    "subscription_count",
                    models.IntegerField(
                        default=0, help_text="Number of active subscriptions"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated user (after authentication)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="websocket_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "exchange_websocket_connections",
                "ordering": ["-last_activity"],
            },
        ),
        migrations.CreateModel(
            name="ConnectionEvent",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("connect", "Connection Established"),
                            ("authenticate", "User Authenticated"),
                            ("subscribe", "Symbol Subscription"),
                            ("unsubscribe", "Symbol Unsubscription"),
                            ("message_sent", "Message Sent"),
                            ("message_received", "Message Received"),
                            ("error", "Error Occurred"),
                            ("disconnect", "Connection Closed"),
                        ],
                        help_text="Type of event",
                        max_length=20,
                    ),
                ),
                (
                    "event_data",
                    models.JSONField(default=dict, help_text="Additional event data"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When event occurred",
                    ),
                ),
                (
                    "connection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="exchange.websocketconnection",
                    ),
                ),
            ],
            options={
                "db_table": "exchange_connection_events",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["user", "-created_at"], name="exchange_or_user_id_a15b75_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["symbol", "-created_at"], name="exchange_or_symbol_18b2ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["status", "-created_at"], name="exchange_or_status_93138b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["order_id"], name="exchange_or_order_i_84671a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="orderexecution",
            index=models.Index(
                fields=["order", "-executed_at"], name="exchange_or_order_i_c6de9c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="orderexecution",
            index=models.Index(
                fields=["execution_id"], name="exchange_or_executi_ed0536_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="symbolsubscription",
            index=models.Index(
                fields=["user", "is_active"], name="exchange_sy_user_id_01cb4a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="symbolsubscription",
            index=models.Index(
                fields=["symbol", "is_active"], name="exchange_sy_symbol_786a85_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="symbolsubscription",
            unique_together={("user", "symbol")},
        ),
        migrations.AddIndex(
            model_name="websocketconnection",
            index=models.Index(
                fields=["user", "status"], name="exchange_we_user_id_7be1e6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="websocketconnection",
            index=models.Index(
                fields=["status", "-last_activity"],
                name="exchange_we_status_81bd28_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="websocketconnection",
            index=models.Index(
                fields=["channel_name"], name="exchange_we_channel_bd7b80_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="connectionevent",
            index=models.Index(
                fields=["connection", "-timestamp"],
                name="exchange_co_connect_da01fe_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="connectionevent",
            index=models.Index(
                fields=["event_type", "-timestamp"],
                name="exchange_co_event_t_3abd80_idx",
            ),
        ),
    ]
