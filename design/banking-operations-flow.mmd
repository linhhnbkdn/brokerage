sequenceDiagram
    participant FE as Frontend
    participant API as Django API

    Note over FE, API: Banking Operations Flow

    Note over FE, API: 1. Link Bank Account
    FE->>+API: POST /api/banking/link-account
    Note right of FE: Authorization: Bearer <access_token><br/>{ bank_routing_number, account_number, account_type, account_holder_name }

    API->>API: validate_access_token()
    API->>API: verify_bank_account_details()
    Note right of API: Validate routing number<br/>Verify account ownership<br/>Check account status

    alt Valid Bank Account
        API->>API: create_bank_link(user_id, bank_details)
        Note right of API: Store encrypted account details<br/>Generate account_link_id<br/>Set verification pending

        API-->>FE: 201 Created
        Note left of API: { account_link_id, status: "pending_verification" }

        FE->>FE: show_verification_required()
    else Invalid Bank Details
        API-->>FE: 400 Bad Request
        Note left of API: { error: "invalid_bank_account" }
    end
    deactivate API

    Note over FE, API: 2. Deposit Funds
    FE->>+API: POST /api/banking/deposit
    Note right of FE: Authorization: Bearer <access_token><br/>{ account_link_id, amount, currency }

    API->>API: validate_access_token()
    API->>API: verify_bank_account_link(user_id, account_link_id)
    Note right of API: Check account verified<br/>Validate deposit limits<br/>Check account status

    alt Valid Deposit Request
        API->>API: initiate_ach_transfer(bank_account, amount)
        Note right of API: Create ACH debit transaction<br/>Update user balance (pending)<br/>Generate transaction_id

        API-->>FE: 202 Accepted
        Note left of API: { transaction_id, status: "pending", estimated_completion: "2024-01-15" }

        FE->>FE: show_deposit_pending()
    else Invalid Request
        API-->>FE: 400 Bad Request
        Note left of API: { error: "insufficient_funds" or "account_not_verified" }
    end
    deactivate API

    Note over FE, API: 3. Withdraw Funds
    FE->>+API: POST /api/banking/withdraw
    Note right of FE: Authorization: Bearer <access_token><br/>{ account_link_id, amount, currency }

    API->>API: validate_access_token()
    API->>API: verify_withdrawal_eligibility(user_id, amount)
    Note right of API: Check account balance<br/>Validate withdrawal limits<br/>Check account verification

    alt Valid Withdrawal Request
        API->>API: initiate_ach_credit(bank_account, amount)
        Note right of API: Create ACH credit transaction<br/>Deduct from user balance<br/>Generate transaction_id

        API-->>FE: 202 Accepted
        Note left of API: { transaction_id, status: "processing", estimated_completion: "2024-01-15" }

        FE->>FE: show_withdrawal_processing()
    else Invalid Request
        API-->>FE: 400 Bad Request
        Note left of API: { error: "insufficient_balance" or "daily_limit_exceeded" }
    end
    deactivate API

    Note over FE, API: 4. Get Bank Accounts
    FE->>+API: GET /api/banking/accounts
    Note right of FE: Authorization: Bearer <access_token>

    API->>API: validate_access_token()
    API->>API: get_user_bank_accounts(user_id)
    Note right of API: Retrieve linked accounts<br/>Mask sensitive details<br/>Return account status

    API-->>-FE: 200 OK
    Note left of API: { accounts: [{ account_link_id, last_four_digits, bank_name, status, account_type }] }

    Note over FE, API: 5. Get Transaction History
    FE->>+API: GET /api/banking/transactions
    Note right of FE: Authorization: Bearer <access_token><br/>?type=deposit&limit=20

    API->>API: validate_access_token()
    API->>API: get_user_transactions(user_id, filters)
    Note right of API: Query transaction history<br/>Apply filters and pagination<br/>Include transaction status

    API-->>-FE: 200 OK
    Note left of API: { transactions: [{ transaction_id, type, amount, status, created_at, completed_at }] }

    Note over FE, API: 6. Verify Bank Account (Micro-deposits)
    FE->>+API: POST /api/banking/verify-account
    Note right of FE: Authorization: Bearer <access_token><br/>{ account_link_id, deposit_amounts: [0.01, 0.23] }

    API->>API: validate_access_token()
    API->>API: verify_micro_deposits(account_link_id, amounts)
    Note right of API: Check micro-deposit amounts<br/>Compare with sent amounts<br/>Update account status

    alt Verification Successful
        API->>API: activate_bank_account(account_link_id)
        Note right of API: Set status to "verified"<br/>Enable deposits/withdrawals

        API-->>FE: 200 OK
        Note left of API: { status: "verified", message: "Account verified successfully" }

        FE->>FE: show_account_verified()
    else Verification Failed
        API-->>FE: 400 Bad Request
        Note left of API: { error: "verification_failed", attempts_remaining: 2 }
    end
    deactivate API

    Note over FE, API: Banking API Details
    rect rgb(255, 248, 240)
        Note over API: ACH Processing<br/>- Deposits: 1-3 business days<br/>- Withdrawals: 1-3 business days<br/>- Micro-deposits: 2-3 business days<br/>- Daily limits apply
    end

    rect rgb(240, 255, 248)
        Note over API: Security Features<br/>- Bank account encryption at rest<br/>- PCI DSS compliance<br/>- Transaction monitoring<br/>- Fraud detection
    end
